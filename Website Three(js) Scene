import './style.css';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import vertexShader from './vertex/vertex.glsl';
import fragmentShader from './vertex/fragment.glsl';
import atmosphereVertexShader from './vertex/atmosphereVertex.glsl';
import atmosphereFragmentShader from './vertex/atmosphereFragment.glsl';
import { Float32BufferAttribute, CatmullRomCurve3 } from 'three';

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 15;

const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);
document.body.appendChild(renderer.domElement);

// Add lighting
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
directionalLight.position.set(1, 1, 1).normalize();
scene.add(directionalLight);

// Load texture
const textureLoader = new THREE.TextureLoader();
const globeTexture = textureLoader.load('./globe.jpeg', () => {
  console.log('Globe texture loaded');
}, undefined, (err) => {
  console.error('Error loading globe texture:', err);
});

// Create sphere
const sphere = new THREE.Mesh(
  new THREE.SphereGeometry(5, 50, 50),
  new THREE.ShaderMaterial({
    vertexShader,
    fragmentShader,
    uniforms: {
      globeTexture: { value: globeTexture }
    }
  })
);
scene.add(sphere);

// Create atmosphere
const atmosphere = new THREE.Mesh(
  new THREE.SphereGeometry(5.8, 50, 50),
  new THREE.ShaderMaterial({
    vertexShader: atmosphereVertexShader,
    fragmentShader: atmosphereFragmentShader,
    blending: THREE.AdditiveBlending,
    side: THREE.BackSide,
    transparent: true
  })
);
scene.add(atmosphere);

// Add stars
const starGeometry = new THREE.BufferGeometry();
const starMaterial = new THREE.PointsMaterial({ color: 0xffffff });
const starVertices = [];

for (let i = 0; i < 10000; i++) {
  const x = (Math.random() - 0.5) * 2000;
  const y = (Math.random() - 0.5) * 2000;
  const z = -Math.random() * 2000;
  starVertices.push(x, y, z);
}

starGeometry.setAttribute('position', new Float32BufferAttribute(starVertices, 3));
const stars = new THREE.Points(starGeometry, starMaterial);
scene.add(stars);

// Track mouse movement
let isMouseOver = false;
let lastMouseX = 0;
let lastMouseY = 0;

document.addEventListener('mousemove', (event) => {
  if (isMouseOver) {
    const deltaX = event.clientX - lastMouseX;
    const deltaY = event.clientY - lastMouseY;
    sphere.rotation.y += deltaX * 0.005;
    sphere.rotation.x += deltaY * 0.005;
    lastMouseX = event.clientX;
    lastMouseY = event.clientY;
  }
});

document.addEventListener('mousedown', (event) => {
  isMouseOver = true;
  lastMouseX = event.clientX;
  lastMouseY = event.clientY;
});

document.addEventListener('mouseup', () => {
  isMouseOver = false;
});
const loader = new GLTFLoader();
let mixers = []; // For handling multiple animations

class GLBModel {
  constructor(url, position, scale, parentGroup = null) {
    this.url = url;
    this.position = position;
    this.scale = scale;
    this.mixer = null;
    this.model = null;
    this.velocity = new THREE.Vector3(
      (Math.random() - 0.5) * 0.1,  // Increased speed
      (Math.random() - 0.5) * 0.1,  // Increased speed
      (Math.random() - 0.5) * 0.1   // Increased speed
    );
    this.parentGroup = parentGroup;
    this.loadModel();
  }

  loadModel() {
    loader.load(this.url, (gltf) => {
      this.model = gltf.scene;

      // Handle animations
      if (gltf.animations.length) {
        this.mixer = new THREE.AnimationMixer(this.model);
        gltf.animations.forEach((clip) => {
          this.mixer.clipAction(clip).play();
        });
        mixers.push(this.mixer);
      }

      // Handle materials
      this.model.traverse((child) => {
        if (child.isMesh) {
          child.material = new THREE.MeshStandardMaterial({
            color: 0xffffff, // Default color or use your own
            roughness: 0.5,
            metalness: 0.5
          });
        }
      });

      this.model.position.copy(this.position);
      this.model.scale.set(this.scale, this.scale, this.scale); // Set scale

      if (this.parentGroup) {
        this.parentGroup.add(this.model);
      } else {
        scene.add(this.model);
      }

      console.log(`${this.url} loaded`);
      
      // Special handling for aircraft color
      if (this.url.includes('spaceshuttle_explorer_1.glb')) {
        this.setColor(0xfff000); // Set aircraft color
      }
    }, undefined, (error) => {
      console.error('Error loading GLB model:', error);
    });
  }

  randomMove() {
    if (this.model) {
      this.model.position.add(this.velocity);

      // Bounce back when hitting boundaries
      const boundary = 10; // Increase the boundary limit
      if (this.model.position.x > boundary || this.model.position.x < -boundary) this.velocity.x *= -1;
      if (this.model.position.y > boundary || this.model.position.y < -boundary) this.velocity.y *= -1;
      if (this.model.position.z > boundary || this.model.position.z < -boundary) this.velocity.z *= -1;
    }
  }

  setColor(color) {
    // Change color for all meshes in the model
    this.model.traverse((child) => {
      if (child.isMesh) {
        child.material.color.set(color);
      }
    });
  }
}

const glbModels = [];

// Create a group for the satellite to make it orbit the globe
const satelliteGroup = new THREE.Group();
scene.add(satelliteGroup);

// Instantiate the satellite model and add it to the satellite group
const satellite = new GLBModel('./vertex/satellite.glb', new THREE.Vector3(6, 0, 0), 1.5, satelliteGroup);
glbModels.push(satellite);

// Add the other models directly to the scene
const drone = new GLBModel('./vertex/mech_drone.glb', new THREE.Vector3(-10, 0, 0), 2.8);
glbModels.push(drone);

// Add aircraft model
const aircraft = new GLBModel('./vertex/spaceshuttle_explorer_1.glb', new THREE.Vector3(0, 10, 0), 0.22);
glbModels.push(aircraft);

// Define a spline curve for the aircraft path
const curve = new CatmullRomCurve3([
  new THREE.Vector3(-20, 0, 0),
  new THREE.Vector3(-18, 5, -10),
  new THREE.Vector3(-16, 6, -5),
  new THREE.Vector3(-14, 6, 0),
  new THREE.Vector3(-12, 4, 5),
  new THREE.Vector3(-9, 3, 5),
  new THREE.Vector3(-6, 5, 3),
  new THREE.Vector3(-3, 6, 2),
  new THREE.Vector3(3, 6, 3),
  new THREE.Vector3(8, 6, -5),
  new THREE.Vector3(12, 3, -4),
  new THREE.Vector3(15, -10, -7),
  new THREE.Vector3(12, -20, -8),
  new THREE.Vector3(6, -15, -5),
  new THREE.Vector3(2, -10, -3),
  new THREE.Vector3(-3, -5, -6),
  new THREE.Vector3(-5, -3, -9),
  new THREE.Vector3(-10, 0, -5)
], true);

// Aircraft movement along the spline curve
let aircraftProgress = 0;
const aircraftSpeed = 0.00039;

function animate() {
  requestAnimationFrame(animate);

  // Update animation mixers
  mixers.forEach(mixer => mixer.update(0.01));

  // Rotate the satellite group to create an orbit
  if (satelliteGroup) {
    satelliteGroup.rotation.y += 0.005; // Adjust the rotation speed as needed
  }

  // Globe rotation
  if (!isMouseOver) {
    sphere.rotation.y += 0.001;
  }

  // GLB models movement: Random
  glbModels.forEach(model => {
    if (model !== satellite && model !== aircraft) { // Skip random movement for the satellite and aircraft
      model.randomMove();
    }
  });

  // Move the aircraft along the spline curve
  if (aircraft.model) {
    aircraftProgress += aircraftSpeed;
    if (aircraftProgress > 1) aircraftProgress -= 1;

    const point = curve.getPointAt(aircraftProgress);
    const tangent = curve.getTangentAt(aircraftProgress);

    aircraft.model.position.copy(point);
    aircraft.model.lookAt(point.clone().add(tangent));
  }

  renderer.render(scene, camera);
}
animate();

// Handle window resize
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
